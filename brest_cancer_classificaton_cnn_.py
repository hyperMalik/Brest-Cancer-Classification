# -*- coding: utf-8 -*-
"""Brest Cancer classificaton CNN .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pqb7wriV6r8WvJ41ZKO8-sDRzO1m6OYX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

brest_cancer = sklearn.datasets.load_breast_cancer()

print(brest_cancer)

data_frame= pd.DataFrame(brest_cancer.data, columns=brest_cancer.feature_names)
data_frame.head(5)

data_frame['label']= brest_cancer.target
data_frame.tail(5)

data_frame.shape

data_frame.info()

data_frame.isnull().sum()

data_frame.describe()

data_frame['label'].value_counts()

data_frame.groupby('label').mean()

x= data_frame.drop(columns='label', axis= 1)
y= data_frame['label']

print(x)

print(y)

x_train, x_test , y_train , y_test= train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape )

from sklearn.preprocessing import StandardScaler

Scaler = StandardScaler()

x_train_std= Scaler.fit_transform(x_train)
x_test_std= Scaler.transform(x_test)

import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

model= keras.Sequential([
    keras.layers.Dense(30, input_shape=(30,), ),
    keras.layers.Dense(20, activation='relu'),
    keras.layers.Dense(2, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history= model.fit(x_train_std, y_train, epochs=10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])

plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['training data', 'Loss'], loc='upper left')
plt.show()

loss, accuracy= model.evaluate(x_test_std, y_test)
print(accuracy*100)

print(x_test_std.shape)
print(x_test_std[0])

y_pred= model.predict(x_test_std)
print(y_pred.shape)
print(y_pred[0])

print(x_test_std)

print(y_pred)

"""so model.predict() give the prediction of each class for that data point"""

input_data= (2.4567, 9.5792, 1.3850, 5.9173, 0.2846, 7.1039, 3.6925, 8.8417, 4.2061, 6.7538,
5.3190, 2.8743, 9.0355, 1.5908, 7.6480, 3.1524, 8.3096, 4.7649, 0.9221, 6.4793,
3.9376, 0.4929, 8.0511, 4.6064, 1.1617, 7.7189, 5.2742, 2.8305, 9.3858, 6.9430)

input_data_as_numpy_array= np.asarray(input_data)

input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)

input_data_std= Scaler.transform(input_data_reshaped)

prediction= model.predict(input_data_std)

print(prediction)

prediction_label= np.argmax(prediction)

print(prediction_label)

if (prediction_label==0):
    print('The breast cancer is Malignant')
else:
    print('The breast cancer is Benign')

